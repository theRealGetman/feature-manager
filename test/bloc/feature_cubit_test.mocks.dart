// Mocks generated by Mockito 5.3.2 from annotations
// in feature_manager/test/bloc/feature_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:feature_manager/src/data/feature_repository.dart' as _i4;
import 'package:feature_manager/src/domain/models/feature.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeature_1 extends _i1.SmartFake implements _i3.Feature {
  _FakeFeature_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FeatureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureRepository extends _i1.Mock implements _i4.FeatureRepository {
  MockFeatureRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Feature> get featuresList => (super.noSuchMethod(
        Invocation.getter(#featuresList),
        returnValue: <_i3.Feature>[],
      ) as List<_i3.Feature>);
  @override
  _i2.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i2.SharedPreferences);
  @override
  _i5.Stream<List<_i3.Feature>> getFeaturesStream() => (super.noSuchMethod(
        Invocation.method(
          #getFeaturesStream,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.Feature>>.empty(),
      ) as _i5.Stream<List<_i3.Feature>>);
  @override
  _i5.Future<List<_i3.Feature>> getFeatures() => (super.noSuchMethod(
        Invocation.method(
          #getFeatures,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Feature>>.value(<_i3.Feature>[]),
      ) as _i5.Future<List<_i3.Feature>>);
  @override
  _i5.Future<void> putValue(
    _i3.Feature? feature,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putValue,
          [
            feature,
            value,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Feature].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeature extends _i1.Mock implements _i3.Feature {
  MockFeature() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: '',
      ) as String);
  @override
  _i3.FeatureType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i3.FeatureType.feature,
      ) as _i3.FeatureType);
  @override
  _i3.FeatureValueType get valueType => (super.noSuchMethod(
        Invocation.getter(#valueType),
        returnValue: _i3.FeatureValueType.text,
      ) as _i3.FeatureValueType);
  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: '',
      ) as String);
  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: '',
      ) as String);
  @override
  String get remoteSourceKey => (super.noSuchMethod(
        Invocation.getter(#remoteSourceKey),
        returnValue: '',
      ) as String);
  @override
  _i3.Feature copyWith({
    String? key,
    _i3.FeatureType? type,
    _i3.FeatureValueType? valueType,
    String? title,
    String? description,
    String? remoteSourceKey,
    Object? value,
    Object? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #key: key,
            #type: type,
            #valueType: valueType,
            #title: title,
            #description: description,
            #remoteSourceKey: remoteSourceKey,
            #value: value,
            #defaultValue: defaultValue,
          },
        ),
        returnValue: _FakeFeature_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #key: key,
              #type: type,
              #valueType: valueType,
              #title: title,
              #description: description,
              #remoteSourceKey: remoteSourceKey,
              #value: value,
              #defaultValue: defaultValue,
            },
          ),
        ),
      ) as _i3.Feature);
}
