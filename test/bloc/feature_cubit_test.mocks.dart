// Mocks generated by Mockito 5.0.15 from annotations
// in feature_manager/test/bloc/feature_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:feature_manager/src/data/feature_repository.dart' as _i3;
import 'package:feature_manager/src/domain/models/feature.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFeature_0 extends _i1.Fake implements _i2.Feature {}

/// A class which mocks [FeatureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureRepository extends _i1.Mock implements _i3.FeatureRepository {
  MockFeatureRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Feature> get featuresList =>
      (super.noSuchMethod(Invocation.getter(#featuresList),
          returnValue: <_i2.Feature>[]) as List<_i2.Feature>);
  @override
  _i4.Stream<List<_i2.Feature>> getFeaturesStream() =>
      (super.noSuchMethod(Invocation.method(#getFeaturesStream, []),
              returnValue: Stream<List<_i2.Feature>>.empty())
          as _i4.Stream<List<_i2.Feature>>);
  @override
  _i4.Future<List<_i2.Feature>> getFeatures() =>
      (super.noSuchMethod(Invocation.method(#getFeatures, []),
              returnValue: Future<List<_i2.Feature>>.value(<_i2.Feature>[]))
          as _i4.Future<List<_i2.Feature>>);
  @override
  _i4.Future<void> putValue(_i2.Feature? feature, Object? value) =>
      (super.noSuchMethod(Invocation.method(#putValue, [feature, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Feature].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeature extends _i1.Mock implements _i2.Feature {
  MockFeature() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  _i2.FeatureType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i2.FeatureType.feature) as _i2.FeatureType);
  @override
  _i2.FeatureValueType get valueType =>
      (super.noSuchMethod(Invocation.getter(#valueType),
          returnValue: _i2.FeatureValueType.text) as _i2.FeatureValueType);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  String get remoteKey =>
      (super.noSuchMethod(Invocation.getter(#remoteKey), returnValue: '')
          as String);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get remoteSourceKey =>
      (super.noSuchMethod(Invocation.getter(#remoteSourceKey), returnValue: '')
          as String);
  @override
  _i2.Feature copyWith(
          {String? key,
          _i2.FeatureType? type,
          _i2.FeatureValueType? valueType,
          String? remoteKey,
          String? title,
          String? description,
          String? remoteSourceKey,
          Object? value,
          Object? defaultValue}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #key: key,
            #type: type,
            #valueType: valueType,
            #remoteKey: remoteKey,
            #title: title,
            #description: description,
            #remoteSourceKey: remoteSourceKey,
            #value: value,
            #defaultValue: defaultValue
          }),
          returnValue: _FakeFeature_0()) as _i2.Feature);
  @override
  String toString() => super.toString();
}
